{"version":3,"sources":["assets/logo.svg","components/Page1.tsx","containers/App.tsx","serviceWorker.ts","reportWebVitals.ts","index.tsx"],"names":["Page1","onRouteChange","textAlign","src","logo","fallbackSrc","alt","mx","as","size","fontFamily","fontWeight","color","m","colorScheme","isDisabled","onClick","Page2Lazy","React","lazy","Page3Lazy","Loading","h","thickness","speed","emptyColor","App","useState","route","setRoute","a","Suspense","fallback","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uHAAe,QAA0B,kC,2LCoB1BA,EAdoB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAClC,OACI,eAAC,IAAD,CAAKC,UAAU,SAAf,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,IAAKC,IAAMC,YAAaD,IAAME,IAAI,aAAaC,GAAG,SACzD,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,MAAMC,WAAW,YAAYC,WAAY,IAAKC,MAAM,YAAYC,EAAG,EAAzF,sCAEJ,cAAC,IAAD,CAAQC,YAAY,SAASL,KAAK,KAAKM,YAAU,EAAjD,oBACA,cAAC,IAAD,CAAQD,YAAY,SAASL,KAAK,KAAKO,QAAS,kBAAMf,EAAc,UAApE,oBACA,cAAC,IAAD,CAAQa,YAAY,SAASL,KAAK,KAAKO,QAAS,kBAAMf,EAAc,UAApE,wBCFNgB,EAAYC,IAAMC,MAAK,kBAAM,gCAC7BC,EAAYF,IAAMC,MAAK,kBAAM,gCAE7BE,EAAoB,WACtB,OACI,cAAC,IAAD,CAAQC,EAAE,QAAV,SACI,cAAC,IAAD,CACIC,UAAU,MACVC,MAAM,QACNC,WAAW,WACXb,MAAM,WACNH,KAAK,UA2ENiB,EArEO,WAElB,MAA0BC,mBAAiB,SAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAIM5B,EAAa,uCAAG,WAAO2B,GAAP,SAAAE,EAAA,sDAgBlBD,EAASD,GAhBS,2CAAH,sDA8CnB,MAAc,UAAVA,EACO,cAAC,EAAD,CAAO3B,cAAeA,IACZ,UAAV2B,EAEH,cAAC,IAAMG,SAAP,CAAgBC,SAAU,cAAC,EAAD,IAA1B,SACI,cAACf,EAAD,CAAWhB,cAAeA,MAK9B,cAAC,IAAM8B,SAAP,CAAgBC,SAAU,cAAC,EAAD,IAA1B,SACI,cAACZ,EAAD,CAAWnB,cAAeA,OCjFtBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SF0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAACe,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YErH5BvB,M","file":"static/js/main.e0399e67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import type React from 'react';\r\nimport { Box, Image, Heading, Button } from '@chakra-ui/react';\r\n\r\nimport { PageProps } from '../types';\r\nimport logo from '../assets/logo.svg';\r\n\r\nconst Page1: React.FC<PageProps> = ({ onRouteChange }) => {\r\n    return (\r\n        <Box textAlign=\"center\">\r\n            <Box>\r\n                <Image src={logo} fallbackSrc={logo} alt=\"logo image\" mx=\"auto\" />\r\n                <Heading as=\"h1\" size=\"2xl\" fontFamily=\"monospace\" fontWeight={200} color=\"green.800\" m={5}>Code-Splitting Page 1</Heading>\r\n            </Box>\r\n            <Button colorScheme=\"orange\" size=\"lg\" isDisabled>Page 1</Button>\r\n            <Button colorScheme=\"orange\" size=\"lg\" onClick={() => onRouteChange('page2')}>Page 2</Button>\r\n            <Button colorScheme=\"orange\" size=\"lg\" onClick={() => onRouteChange('page3')}>Page 3</Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Page1;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Center, Spinner } from '@chakra-ui/react';\r\n\r\nimport Page1 from '../components/Page1';\r\n// Part 1 - No Code Splitting\r\n// import Page2 from '../components/Page2';\r\n// import Page3 from '../components/Page3';\r\n\r\n// Part 3 - Cleaner Code Splitting\r\n// import AsyncPage from './AsyncPage';\r\n\r\n// Part 4 - React.lazy\r\nconst Page2Lazy = React.lazy(() => import('../components/Page2'));\r\nconst Page3Lazy = React.lazy(() => import('../components/Page3'));\r\n\r\nconst Loading: React.FC = () => {\r\n    return (\r\n        <Center h=\"100vh\">\r\n            <Spinner\r\n                thickness=\"4px\"\r\n                speed=\"0.65s\"\r\n                emptyColor=\"gray.200\"\r\n                color=\"blue.500\"\r\n                size=\"xl\"\r\n            />\r\n        </Center>\r\n    );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n    // Part 1 - No Code Splitting\r\n    const [route, setRoute] = useState<string>('page1');\r\n    // Part 2 - Code Splitting - manual\r\n    // const [Component, setComponent] = useState<React.ReactElement | null>(null);\r\n\r\n    const onRouteChange = async (route: string) => {\r\n        // Part 1 - No Code Splitting\r\n        // setRoute(route);\r\n        // Part 2 - Code Splitting - manual\r\n        // if (route === 'page1') {\r\n        //     setRoute(route);\r\n        // } else if (route === 'page2') {\r\n        //     const { default: Page2 } = await import('../components/Page2');\r\n        //     setRoute(route);\r\n        //     setComponent(<Page2 onRouteChange={onRouteChange} />);\r\n        // } else {\r\n        //     const { default: Page3 } = await import('../components/Page3');\r\n        //     setRoute(route);\r\n        //     setComponent(<Page3 onRouteChange={onRouteChange} />);\r\n        // }\r\n        // Part 3 - Cleaner Code Splitting && // Part 4 - React.lazy\r\n        setRoute(route);\r\n    };\r\n\r\n    // Part 1 - No code splitting\r\n    // if (route === 'page1') {\r\n    //     return <Page1 onRouteChange={onRouteChange} />;\r\n    // } else if (route === 'page2') {\r\n    //     return <Page2 onRouteChange={onRouteChange} />;\r\n    // } else {\r\n    //     return <Page3 onRouteChange={onRouteChange} />;\r\n    // }\r\n    // Part 2 - Code Splitting - manual\r\n    // if (route === 'page1') {\r\n    //     return <Page1 onRouteChange={onRouteChange} />;\r\n    // } else {\r\n    //     if (!Component) return null;\r\n\r\n    //     return Component;\r\n    // }\r\n    // Part 3 - Cleaner Code Splitting\r\n    // if (route === 'page1') {\r\n    //     return <Page1 onRouteChange={onRouteChange} />;\r\n    // } else if (route === 'page2') {\r\n    //     const AsyncPage2 = AsyncPage(() => import('../components/Page2'));\r\n    //     return <AsyncPage2 onRouteChange={onRouteChange} />;\r\n    // } else {\r\n    //     const AsyncPage3 = AsyncPage(() => import('../components/Page3'));\r\n    //     return <AsyncPage3 onRouteChange={onRouteChange} />;\r\n    // }\r\n    // Part 4 - React.lazy\r\n    if (route === 'page1') {\r\n        return <Page1 onRouteChange={onRouteChange} />;\r\n    } else if (route === 'page2') {\r\n        return (\r\n            <React.Suspense fallback={<Loading />}>\r\n                <Page2Lazy onRouteChange={onRouteChange} />\r\n            </React.Suspense>\r\n        );\r\n    } else {\r\n        return (\r\n            <React.Suspense fallback={<Loading />}>\r\n                <Page3Lazy onRouteChange={onRouteChange} />\r\n            </React.Suspense>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}